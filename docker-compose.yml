services:
    web:
        extends:
            file: ./docker/config.${CERT_TARGET}.yml
            service: web
        image: web
        build: 
            context: ./app
            dockerfile: Dockerfile
            target: ${TARGET}
            args:
                - VIRTUAL_HOST=${HOST}
        restart: unless-stopped
        container_name: web
        expose: 
            - "3000"
            - "24678"
        ports:
            - "127.0.0.1:3000:3000"
            - "127.0.0.1:24678:24678"
        volumes:
            - conf:/etc/nginx/conf.d
            - vhost:/etc/nginx/vhost.d
            - /var/run/docker.sock:/var/run/docker.sock:ro
        environment:
            - VIRTUAL_HOST=${HOST}
            - VIRTUAL_PORT=3000
            - GOOGLE_APPLICATION_CREDENTIALS=./google-cloud.json
            - FIREBASE_API_KEY=AIzaSyCwBM6pEe6m09J8hLco4Dzsc_9bDkxrpwg
    api:
        image: api:latest
        extends:
            file: ./docker/config.${CERT_TARGET}.yml
            service: api
        build: 
            context: ./api
            dockerfile: Dockerfile
            target: ${TARGET}
        restart: unless-stopped
        container_name: api
        expose:
            - "443"
        ports:
            - "127.0.0.1:5000:443"
        volumes:
            - conf:/etc/nginx/conf.d
            - vhost:/etc/nginx/vhost.d
            - ./api/src:/usr/src/app/src
            - ./api/nodemon.json:/usr/src/app/nodemon.json
            - /var/run/docker.sock:/var/run/docker.sock:ro
        environment:
            - VIRTUAL_HOST=api.${HOST}
            - VIRTUAL_PROTO=https
            - VIRTUAL_PORT=443
            - NODE_PORT=443
            - GOOGLE_APPLICATION_CREDENTIALS=./google-cloud.json
            - FIREBASE_API_KEY=AIzaSyCwBM6pEe6m09J8hLco4Dzsc_9bDkxrpwg
    code-server:
        image: ghcr.io/linuxserver/code-server
        container_name: code-server
        environment:
            - PUID=1000
            - PGID=1000
            - TZ=Europe/London
            - PROXY_DOMAIN=code.sorosbot.com #optional
            - VIRTUAL_HOST=code.${HOST}
        volumes:
            - ./dev/config:/config
        ports:
            - 127.0.0.1:8443:8443
        restart: unless-stopped
            
    freqtrade:
        image: freqtradeorg/freqtrade:stable
        # image: freqtradeorg/freqtrade:develop
        # Use plotting image
        # image: freqtradeorg/freqtrade:develop_plot
        # Build step - only needed when additional dependencies are needed
        # build:
        #   context: .
        #   dockerfile: "./docker/Dockerfile.custom"
        restart: unless-stopped
        container_name: freqtrade
        volumes:
            - conf:/etc/nginx/conf.d
            - vhost:/etc/nginx/vhost.d
            - certs:/etc/nginx/certs:ro
            - "./freqtrade/user_data:/freqtrade/user_data"
            - /var/run/docker.sock:/var/run/docker.sock:ro
        # Expose api on port 8080 (localhost only)
        # Please read the https://www.freqtrade.io/en/latest/rest-api/ documentation
        # before enabling this.
        ports:
            - 127.0.0.1:8080:8080
        # Default command used when running `docker compose up`
        command: >
            trade
            --logfile /freqtrade/user_data/logs/freqtrade.log
            --db-url sqlite:////freqtrade/user_data/tradesv3.sqlite
            --config /freqtrade/user_data/config.json
            --strategy SampleStrategy
        environment:
            - VIRTUAL_HOST=freqtrade.${HOST}

    portainer:
        container_name: portainer
        image: portainer/portainer-ce
        restart: always
        ports:
            - "127.0.0.1:8000:8000"
            - "127.0.0.1:9000:9000"
        volumes: 
            - portainer_data:/data
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - VIRTUAL_HOST=portainer.${HOST}
            - VIRTUAL_PORT=9000

    nginx-proxy:
        extends:
            file: ./docker/config.${CERT_TARGET}.yml
            service: nginx-proxy
        image: nginx
        container_name: nginx-proxy
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - conf:/etc/nginx/conf.d
            - html:/usr/share/nginx/html
            - ./nginx/error.html:/var/www/default/error.html:ro
            - ./nginx/favicon.png:/var/www/default/favicon.png:ro
            - ./nginx/vhost.d:/etc/nginx/vhost.d
            - ./nginx/conf.d/server.conf:/etc/nginx/conf.d/server.conf:ro
            - ./nginx/include:/etc/nginx/include:ro
        restart: always
    
    docker-gen:
        extends:
            file: ./docker/config.${CERT_TARGET}.yml
            service: docker-gen
        image: jwilder/docker-gen
        command: -notify-sighup nginx-proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
        container_name: nginx-proxy-gen
        depends_on:
            - nginx-proxy
        volumes:
            - conf:/etc/nginx/conf.d
            - ./nginx/vhost.d:/etc/nginx/vhost.d
            - ./nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
            - /var/run/docker.sock:/tmp/docker.sock:ro
        restart: always

    letsencrypt:
        image: jrcs/letsencrypt-nginx-proxy-companion
        container_name: nginx-proxy-le
        depends_on:
            - nginx-proxy
            - docker-gen
        volumes:
            - vhost:/etc/nginx/vhost.d
            - html:/usr/share/nginx/html
            - certs:/etc/nginx/certs
            - /var/run/docker.sock:/var/run/docker.sock:ro
        environment:
            - NGINX_PROXY_CONTAINER=nginx-proxy
            - NGINX_DOCKER_GEN_CONTAINER=nginx-proxy-gen
            - DEFAULT_EMAIL=ssl@sorosbot.com
        restart: always
    
volumes:
    conf:
    vhost: 
    html:
    certs:
    freqtrade:
    web:
    portainer_data:

networks:
    default:
        name: nginx-proxy